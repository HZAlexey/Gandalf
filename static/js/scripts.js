document.addEventListener("DOMContentLoaded", function () {
    const createVorwandButton = document.getElementById("create-vorwand-button");
    const changeTypeSelect = document.getElementById("change_type");
    const vorwandLink = document.getElementById("vorwand-link");
    const generatedIdInput = document.getElementById("generated-id");
    const linkToCardInput = document.getElementById("link_to_card");
    const changeBranch = document.getElementById("change_branch");

    // üîπ –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    const tabs = document.querySelectorAll(".tab");
    const contents = document.querySelectorAll(".tab-content");

    tabs.forEach(tab => {
        tab.addEventListener("click", function () {
            tabs.forEach(t => t.classList.remove("active"));
            contents.forEach(c => c.classList.remove("active"));

            tab.classList.add("active");
            document.getElementById(tab.dataset.tab).classList.add("active");
        });
    });

    // üîπ –õ–æ–≥–∏–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
    const nestedTabs = document.querySelectorAll(".nested-tab");
    const nestedContents = document.querySelectorAll(".nested-tab-content");

    nestedTabs.forEach(tab => {
        tab.addEventListener("click", function () {
            nestedTabs.forEach(t => t.classList.remove("active"));
            nestedContents.forEach(c => c.classList.remove("active"));

            tab.classList.add("active");
            document.getElementById(tab.dataset.nestedTab).classList.add("active");
        });
    });

    // üîπ –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ "–°–≤—è–∑—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π"
    function updateLinkToCardState() {
        const selectedChangeType = changeTypeSelect.value;
        const changeTypeLabel = document.querySelector('label[for="link_to_card"]');

        if (selectedChangeType === "–ù–æ–≤–∞—è –æ—Ä–≥-—Ü–∏—è") {
            linkToCardInput.disabled = true;
            linkToCardInput.value = "";
            changeTypeLabel.classList.add('disabled-style');
        } else {
            linkToCardInput.disabled = false;
            changeTypeLabel.classList.remove('disabled-style');
        }
    }

    // üîπ –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ "–ü—Ä–æ–µ–∫—Ç"
    function updateChangeBranch() {
        const selectedChangeType = changeTypeSelect.value;
        const changeTypeLabel = document.querySelector('label[for="change_branch"]');

        if (selectedChangeType === "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥-—Ü–∏–∏") {
            changeBranch.disabled = true;
            changeBranch.value = "";
            changeTypeLabel.classList.add('disabled-style');
        } else {
            changeBranch.disabled = false;
            changeTypeLabel.classList.remove('disabled-style');
        }
    }

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ "–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    changeTypeSelect.addEventListener("change", function () {
        updateLinkToCardState();
        updateChangeBranch();
    });

    // üîπ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    updateLinkToCardState();
    updateChangeBranch();

    // üîπ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è
    function showError(message) {
        let errorLabel = document.getElementById("error-message");

        if (!errorLabel) {
            errorLabel = document.createElement("div");
            errorLabel.id = "error-message";
            errorLabel.style.color = "red";
            errorLabel.style.position = "absolute";
            errorLabel.style.left = "110%";
            errorLabel.style.top = "50%";
            errorLabel.style.transform = "translateY(-50%)";
            errorLabel.style.whiteSpace = "nowrap";
            errorLabel.style.paddingLeft = "10px";

            const container = document.createElement("div");
            container.style.position = "relative";
            container.style.display = "inline-block";

            linkToCardInput.parentNode.insertBefore(container, linkToCardInput);
            container.appendChild(linkToCardInput);
            container.appendChild(errorLabel);
        }

        errorLabel.textContent = message;
        errorLabel.style.display = "inline";

        document.addEventListener("click", function hideError(event) {
            if (!linkToCardInput.contains(event.target) && event.target !== errorLabel) {
                errorLabel.style.display = "none";
                document.removeEventListener("click", hideError);
            }
        });
    }

    // üîπ –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ü–µ–ø–∫–∏ - –∫–∞–∫–æ–π –∞–ø–∏ –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    createVorwandButton.addEventListener("click", async function () {
        createVorwandButton.disabled = true;
        createVorwandButton.textContent = "–û–∂–∏–¥–∞–Ω–∏–µ...";

        const selectedCityCode = changeBranch.value;
        const cardSyncode = linkToCardInput.value;
        const changeType = changeTypeSelect.value;

        if (changeType === "–ù–æ–≤–∞—è –æ—Ä–≥-—Ü–∏—è" && !selectedCityCode) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥!");
            resetButton();
            return;
        }

        if (changeType === "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥-—Ü–∏–∏" && !cardSyncode) {
            alert("–í–≤–µ–¥–∏—Ç–µ syncode –∫–∞—Ä—Ç–æ—á–∫–∏!");
            resetButton();
            return;
        }

        // üîπ –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ –∏
        let selectedRubrics = [];
        $('.rubric-group').each(function() {
            let rubricId = $(this).find('.rubric-select').val();
            let action = $(this).find('.rubric-action').val();  // "Create" –∏–ª–∏ "Delete"

            if (rubricId) {
                selectedRubrics.push({ "id": rubricId, "action": action });
            }
        });

        console.log("üìå –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π rubrics:", selectedRubrics);  // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π


        let apiUrl;
        let requestData = {
        city_code: selectedCityCode,
        rubrics: selectedRubrics
        };

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–±—Ä–∏–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (selectedRubrics.length > 0) {
            requestData.rubrics = selectedRubrics;
        }

        if (changeType === "–ù–æ–≤–∞—è –æ—Ä–≥-—Ü–∏—è") {
            apiUrl = "/api/create-vorwand";
            requestData.city_code = selectedCityCode;
        } else if (changeType === "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥-—Ü–∏–∏") {
            apiUrl = "/api/update-vorwand";
            requestData.card_syncode = cardSyncode;
        } else {
            alert("–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è!");
            resetButton();
            return;
        }


        try {
            const response = await fetch(apiUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestData),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
            }

            generatedIdInput.value = data.vorwand_id || "–û—à–∏–±–∫–∞!";

            if (data.vorwand_id) {
                vorwandLink.href = `https://${sessionHostname}/vorwand#/id=${data.vorwand_id}`;
                vorwandLink.style.display = "inline";
            } else {
                vorwandLink.style.display = "none";
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", error);
            showError(error.message);
        } finally {
            resetButton();
        }
    });

    function resetButton() {
        createVorwandButton.disabled = false;
        createVorwandButton.textContent = "–°–æ–∑–¥–∞—Ç—å –∑–∞—Ü–µ–ø–∫—É";
    }
});

// –í—ã–±—Ä–∞—Ç—å —Ä—É–±—Ä–∏–∫—É

$(document).ready(function() {
    $('#rubric').select2({
        placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É",
        allowClear: true,  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        minimumInputLength: 2,  // –ù–∞—á–Ω–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ 2 —Å–∏–º–≤–æ–ª–æ–≤
        ajax: {
            url: "/api/rubrics",
            dataType: 'json',
            delay: 270,
            data: function (params) {
                return { term: params.term };  // üîπ –ü–µ—Ä–µ–¥–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ API
            },
            processResults: function (data) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);  // –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
                return { results: data };
            },
            error: function(xhr, status, error) {
                console.log("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);  // –õ–æ–≥ –æ—à–∏–±–æ–∫
            }
        }
    });
});

// –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä—É–±—Ä–∏–∫—É
$(document).ready(function() {
    function initSelect2(selector) {
        $(selector).select2({
            placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É",
            allowClear: true,
            minimumInputLength: 2,
            ajax: {
                url: "/api/rubrics",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return { term: params.term };
                },
                processResults: function (data) {
                    return { results: data };
                }
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Select2 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è
    initSelect2('.rubric-select');

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è —Ä—É–±—Ä–∏–∫–∏
    $('#add-rubric').click(function() {
        let rubricCount = $('.rubric-group').length + 1;  // –î–µ–ª–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è radio

        let newRubric = $('<div class="rubric-group">' +
            '<select class="rubric-action" style="width: 80px; margin-right: 10px;">' +
                    '<option value="Create" selected>–°–æ–∑–¥–∞—Ç—å</option>' +
                    '<option value="Delete">–£–¥–∞–ª–∏—Ç—å</option>' +
            '</select>' +
            '<select class="rubric-select" name="rubrics[]" style="width: 300px;"></select>' +
            '<span class="remove-rubric">‚úñ</span>' +
            '</div>');

        $('#rubrics-container').append(newRubric);
        initSelect2(newRubric.find('.rubric-select'));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —É –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        newRubric.find('.remove-rubric').show();
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä—É–±—Ä–∏–∫–∏
    $(document).on('click', '.remove-rubric', function() {
        $(this).parent().remove();
    });

    // üîπ –°–æ–±–∏—Ä–∞–µ–º ID —Ä—É–±—Ä–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã
    $('#submit-form').click(function() {
    let selectedRubrics = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
    $('.rubric-group').each(function() {
        let rubricId = $(this).find('.rubric-select').val();  // –ü–æ–ª—É—á–∞–µ–º ID —Ä—É–±—Ä–∏–∫–∏
        let action = $(this).find('.rubric-action').val();  // "Create" –∏–ª–∏ "Delete"

        if (rubricId) {
            selectedRubrics.push({ "id": rubricId, "action": action });  // ‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç
        }
    });

    let selectedCityCode = $('#change_branch').val();

    if (!selectedCityCode) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥!");
        return;
    }

    console.log("üìå –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π rubrics:", selectedRubrics);  // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    $.ajax({
        url: "/api/create-vorwand",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({
            city_code: selectedCityCode,
            rubrics: selectedRubrics
        }),
        success: function(response) {
            console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
            $('#result').val(response.vorwand_id);
        },
        error: function(xhr) {
            console.error("‚ùå –û—à–∏–±–∫–∞:", xhr.responseText);
        }
    });
});


});