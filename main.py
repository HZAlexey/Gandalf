from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from auth_routes import auth_bp
from VorwandsCreateAPI.Bizaccount import BizAccount
import pyodbc
import psycopg2

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprint –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.register_blueprint(auth_bp, url_prefix='/auth')

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
@app.route('/')
def root():
    return redirect(url_for('auth.login'))

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
@app.route('/main')
def main_page():
    if 'cookie' not in session:
        return redirect(url_for('auth.login'))

    hostname = session.get('hostname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç')
    return render_template('index.html', hostname=hostname)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—É–±—Ä–∏–∫
@app.route("/api/rubrics", methods=["GET"])
def rubrics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä—É–±—Ä–∏–∫ –∏–∑ MSSQL —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞"""

    hostname = session.get('hostname', 'default_host')  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ hostname
    search_term = request.args.get("term", "")  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞

    try:
        cnxn = pyodbc.connect(
            "Driver={SQL Server Native Client 11.0};"
            f"Server=uk-{hostname}sql;"
            f"Database=Youla.{hostname};"
            "Trusted_Connection=yes;"
        )
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}"}), 500

    try:
        with cnxn.cursor() as cursor:
            print(
                f"üîπ –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å: SELECT Syncode, Name FROM reference.Rubrics WHERE Name LIKE '%{search_term}%'")

            cursor.execute(
                """
                SELECT Syncode, Name 
                FROM reference.Rubrics 
                WHERE IsDeleted = 0
                AND Name LIKE ?
                """, (f"%{search_term}%",)
            )

            rows = cursor.fetchall()
            print(f"üîπ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")

            if not rows:
                return jsonify([])  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

            rubrics = []
            for row in rows:
                if len(row) < 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å—Ç—Ä–æ–∫–∏ –µ—Å—Ç—å –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                    print("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏:", row)
                    continue
                rubrics.append({"id": row[0], "text": row[1]})

        return jsonify(rubrics)
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}), 500


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ FirmSyncode –ø–æ card_syncode –≤ –ë–î

def get_firm_syncode(card_syncode):
    """–ü–æ–ª—É—á–∞–µ—Ç FirmSyncode –ø–æ card_syncode –∏–∑ –ë–î"""

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º hostname –∏–∑ session
    hostname = session.get('hostname')
    if not hostname:
        print("‚ùå –û—à–∏–±–∫–∞: hostname –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ session.")
        return None

    try:
        cnxn = pyodbc.connect( "Driver={SQL Server Native Client 11.0};"
                                f"Server=uk-{hostname}sql;"
                                f"Database=Youla.{hostname};"
                                "Trusted_Connection=yes;")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", e)
        return None

    try:
        with cnxn.cursor() as curs:
            curs.execute(
                '''
                SELECT FirmSyncode 
                FROM reference.Cards
                WHERE Syncode = ?
                ''', (card_syncode,))

            row = curs.fetchone()
            return row[0] if row else None
    finally:
        curs.close()


# ‚úÖ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ü–µ–ø–∫–∏ "–ù–æ–≤–∞—è –æ—Ä–≥-—Ü–∏—è"
@app.route("/api/create-vorwand", methods=["POST"])
def create_vorwand():
    data = request.get_json()
    city_code = data.get("city_code")
    rubrics = data.get("rubrics", [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–±—Ä–∏–∫

    cookies = session.get("cookie", "")
    if not cookies:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}), 401

    if not city_code:
        return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω city_code"}), 400

    biz = BizAccount()
    try:
        response = biz.bizaccount_create_vorwands(cookies, city_code, rubrics)

        if response is None:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML"}), 500  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response –Ω–µ None

        if isinstance(response, tuple) and response[1] == 401:
            return jsonify(response[0]), 401  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        return jsonify({"vorwand_id": response})
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úÖ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ü–µ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥-—Ü–∏–∏"
@app.route("/api/update-vorwand", methods=["POST"])
def update_vorwand():
    data = request.get_json()
    #city_code = data.get("city_code")
    card_syncode = data.get("card_syncode")

    cookies = session.get("cookie", "")
    if not cookies:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}), 401

    # üîπ –ò—â–µ–º FirmSyncode –≤ –ë–î
    firm_syncode = get_firm_syncode(card_syncode)

    if not firm_syncode:
        return jsonify({"error": "—Ñ–∏—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    biz = BizAccount()
    try:
        # üëá –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ update_vorwand_request (–°–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –Ω–∏–∂–µ)
        response = biz.update_vorwand_request(cookies, firm_syncode, card_syncode)#, city_code)

        if isinstance(response, tuple) and response[1] == 401:
            return jsonify(response[0]), 401  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        return jsonify({"vorwand_id": response})
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True)